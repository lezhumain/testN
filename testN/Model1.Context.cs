//------------------------------------------------------------------------------
// <auto-generated>
//    Ce code a été généré à partir d'un modèle.
//
//    Des modifications manuelles apportées à ce fichier peuvent conduire à un comportement inattendu de votre application.
//    Les modifications manuelles apportées à ce fichier sont remplacées si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace testN
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class BDD_SIO7_CONNSETT : DbContext
    {
        public BDD_SIO7_CONNSETT()
            : base("name=BDD_SIO7_CONNSETT")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<ACTIVITE_COMPLEMENTAIRE> ACTIVITE_COMPLEMENTAIRE { get; set; }
        public DbSet<AVOIR> AVOIR { get; set; }
        public DbSet<CALENDRIER> CALENDRIER { get; set; }
        public DbSet<COLLABORATEUR> COLLABORATEUR { get; set; }
        public DbSet<COMMUNE> COMMUNE { get; set; }
        public DbSet<COMPOSANT> COMPOSANT { get; set; }
        public DbSet<CONSTITUER> CONSTITUER { get; set; }
        public DbSet<DATE> DATE { get; set; }
        public DbSet<DEPARTEMENT> DEPARTEMENT { get; set; }
        public DbSet<DIRECTEUR_REGIONAL> DIRECTEUR_REGIONAL { get; set; }
        public DbSet<DOSAGE> DOSAGE { get; set; }
        public DbSet<ETRE_RESPONSABLE> ETRE_RESPONSABLE { get; set; }
        public DbSet<FAMILLE> FAMILLE { get; set; }
        public DbSet<FICHE_FRAIS> FICHE_FRAIS { get; set; }
        public DbSet<GERE> GERE { get; set; }
        public DbSet<INCLURE> INCLURE { get; set; }
        public DbSet<MEDICAMENT> MEDICAMENT { get; set; }
        public DbSet<MOTIF> MOTIF { get; set; }
        public DbSet<OFFRE> OFFRE { get; set; }
        public DbSet<PARTICIPE> PARTICIPE { get; set; }
        public DbSet<POSSEDER> POSSEDER { get; set; }
        public DbSet<PRATICIEN> PRATICIEN { get; set; }
        public DbSet<PRESCRIRE> PRESCRIRE { get; set; }
        public DbSet<PRESENTATION> PRESENTATION { get; set; }
        public DbSet<RAPPORT_DE_VISITE> RAPPORT_DE_VISITE { get; set; }
        public DbSet<REGION> REGION { get; set; }
        public DbSet<REMPLACE> REMPLACE { get; set; }
        public DbSet<RESPONSABLE_DE_SECTEUR> RESPONSABLE_DE_SECTEUR { get; set; }
        public DbSet<SECTEUR> SECTEUR { get; set; }
        public DbSet<SPECIALITE> SPECIALITE { get; set; }
        public DbSet<sysdiagrams> sysdiagrams { get; set; }
        public DbSet<TYPE_FRAIS> TYPE_FRAIS { get; set; }
        public DbSet<TYPE_INDIVIDU> TYPE_INDIVIDU { get; set; }
        public DbSet<TYPE_PRATICIEN> TYPE_PRATICIEN { get; set; }
        public DbSet<praticienAdresse> praticienAdresse { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
